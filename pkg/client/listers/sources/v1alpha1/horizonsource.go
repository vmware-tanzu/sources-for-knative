/*
Copyright 2022 VMware, Inc.
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vmware-tanzu/sources-for-knative/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HorizonSourceLister helps list HorizonSources.
// All objects returned here must be treated as read-only.
type HorizonSourceLister interface {
	// List lists all HorizonSources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HorizonSource, err error)
	// HorizonSources returns an object that can list and get HorizonSources.
	HorizonSources(namespace string) HorizonSourceNamespaceLister
	HorizonSourceListerExpansion
}

// horizonSourceLister implements the HorizonSourceLister interface.
type horizonSourceLister struct {
	indexer cache.Indexer
}

// NewHorizonSourceLister returns a new HorizonSourceLister.
func NewHorizonSourceLister(indexer cache.Indexer) HorizonSourceLister {
	return &horizonSourceLister{indexer: indexer}
}

// List lists all HorizonSources in the indexer.
func (s *horizonSourceLister) List(selector labels.Selector) (ret []*v1alpha1.HorizonSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HorizonSource))
	})
	return ret, err
}

// HorizonSources returns an object that can list and get HorizonSources.
func (s *horizonSourceLister) HorizonSources(namespace string) HorizonSourceNamespaceLister {
	return horizonSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HorizonSourceNamespaceLister helps list and get HorizonSources.
// All objects returned here must be treated as read-only.
type HorizonSourceNamespaceLister interface {
	// List lists all HorizonSources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HorizonSource, err error)
	// Get retrieves the HorizonSource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HorizonSource, error)
	HorizonSourceNamespaceListerExpansion
}

// horizonSourceNamespaceLister implements the HorizonSourceNamespaceLister
// interface.
type horizonSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HorizonSources in the indexer for a given namespace.
func (s horizonSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HorizonSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HorizonSource))
	})
	return ret, err
}

// Get retrieves the HorizonSource from the indexer for a given namespace and name.
func (s horizonSourceNamespaceLister) Get(name string) (*v1alpha1.HorizonSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("horizonsource"), name)
	}
	return obj.(*v1alpha1.HorizonSource), nil
}
